_ZN3phi13string_lengthIKcEENS_7integerImEEPT_:
   37|     27|{
   38|     27|    PHI_ASSERT(string != nullptr, "Passing nullptr to string_length is not allowed. Use "
  ------------------
  |  |   53|     27|#    define PHI_ASSERT(condition, ...) PHI_RELEASE_ASSERT(condition, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   42|     27|    PHI_BEGIN_MACRO()                                                                              \
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|     27|#define PHI_BEGIN_MACRO() do {
  |  |  |  |  ------------------
  |  |  |  |   43|     27|    PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast")                                           \
  |  |  |  |   44|     27|    if (PHI_UNLIKELY(!static_cast<bool>(condition)))                                               \
  |  |  |  |  ------------------
  |  |  |  |  |  |   12|     27|#    define PHI_UNLIKELY(condition) __builtin_expect(!!(condition), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (12:37): [True: 0, False: 27]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   45|     27|    {                                                                                              \
  |  |  |  |   46|      0|        ::phi::detail::phi_assert_failure_handler(#condition, __FILE__, __LINE__,                  \
  |  |  |  |   47|      0|                                                  PHI_CURRENT_FUNCTION());                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   24|      0|#    define PHI_CURRENT_FUNCTION() __PRETTY_FUNCTION__
  |  |  |  |  ------------------
  |  |  |  |   48|      0|    }                                                                                              \
  |  |  |  |   49|     27|    PHI_GCC_SUPPRESS_WARNING_POP()                                                                 \
  |  |  |  |   50|     27|    PHI_END_MACRO()
  |  |  |  |  ------------------
  |  |  |  |  |  |   25|     27|#define PHI_END_MACRO() } while ((void) 0, 0) /* avoid warnings */
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (25:34): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   39|     27|                                  "safe_string_length if you intended to pass a nullptr.");
   40|       |
   41|     27|    usize count = 0u;
   42|    635|    for (; *string != CharT('\0'); ++string)
  ------------------
  |  Branch (42:12): [True: 608, False: 27]
  ------------------
   43|    608|    {
   44|    608|        ++count;
   45|    608|    }
   46|       |
   47|     27|    return count;
   48|     27|}

_ZN3phi7integerImEppEv:
  310|    608|    {
  311|    608|        PHI_ASSERT(!detail::will_addition_error(detail::arithmetic_tag_for<IntegerT>{}, m_Value,
  ------------------
  |  |   53|    608|#    define PHI_ASSERT(condition, ...) PHI_RELEASE_ASSERT(condition, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   42|    608|    PHI_BEGIN_MACRO()                                                                              \
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    608|#define PHI_BEGIN_MACRO() do {
  |  |  |  |  ------------------
  |  |  |  |   43|    608|    PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast")                                           \
  |  |  |  |   44|    608|    if (PHI_UNLIKELY(!static_cast<bool>(condition)))                                               \
  |  |  |  |  ------------------
  |  |  |  |  |  |   12|    608|#    define PHI_UNLIKELY(condition) __builtin_expect(!!(condition), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (12:37): [True: 0, False: 608]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   45|    608|    {                                                                                              \
  |  |  |  |   46|      0|        ::phi::detail::phi_assert_failure_handler(#condition, __FILE__, __LINE__,                  \
  |  |  |  |   47|      0|                                                  PHI_CURRENT_FUNCTION());                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   24|      0|#    define PHI_CURRENT_FUNCTION() __PRETTY_FUNCTION__
  |  |  |  |  ------------------
  |  |  |  |   48|      0|    }                                                                                              \
  |  |  |  |   49|    608|    PHI_GCC_SUPPRESS_WARNING_POP()                                                                 \
  |  |  |  |   50|    608|    PHI_END_MACRO()
  |  |  |  |  ------------------
  |  |  |  |  |  |   25|    608|#define PHI_END_MACRO() } while ((void) 0, 0) /* avoid warnings */
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (25:34): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|    608|                                                IntegerT(1)),
  313|    608|                   "Operator++ will result in overflow. Args {}", m_Value);
  314|       |
  315|    608|        m_Value += 1;
  316|    608|        return *this;
  317|    608|    }
_ZN3phi6detail19will_addition_errorImEEbNS0_20unsigned_integer_tagET_S3_:
  140|    608|    {
  141|    608|        return std::numeric_limits<TypeT>::max() - rhs < lhs;
  142|    608|    }

LLVMFuzzerTestOneInput:
    5|     30|{
    6|     30|    if (size == 0)
  ------------------
  |  Branch (6:9): [True: 0, False: 30]
  ------------------
    7|      0|    {
    8|      0|        return 0;
    9|      0|    }
   10|     30|    if (data[size - 1] != '\0')
  ------------------
  |  Branch (10:9): [True: 3, False: 27]
  ------------------
   11|      3|    {
   12|      3|        return 0;
   13|      3|    }
   14|       |
   15|     27|    const char* string = reinterpret_cast<const char*>(data);
   16|       |
   17|     27|    phi::usize result = phi::string_length(string);
   18|     27|    result            = phi::safe_string_length(string);
   19|       |
   20|     27|    (void)result;
   21|       |
   22|     27|    return 0;
   23|     30|}


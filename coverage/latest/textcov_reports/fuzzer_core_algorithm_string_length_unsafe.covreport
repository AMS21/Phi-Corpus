_ZN3phi20string_length_unsafeIKcEENS_7integerImEEPT_:
   32|    103|{
   33|    103|    PHI_ASSERT(string != nullptr, "Passing nullptr to string_length_unsafe is not allowed. Use "
  ------------------
  |  |   53|    103|#    define PHI_ASSERT(condition, ...) PHI_RELEASE_ASSERT(condition, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   42|    103|    PHI_BEGIN_MACRO()                                                                              \
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    103|#define PHI_BEGIN_MACRO() do {
  |  |  |  |  ------------------
  |  |  |  |   43|    103|    PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast")                                           \
  |  |  |  |   44|    103|    if (PHI_UNLIKELY(!static_cast<bool>(condition)))                                               \
  |  |  |  |  ------------------
  |  |  |  |  |  |   12|    103|#    define PHI_UNLIKELY(condition) __builtin_expect(!!(condition), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (12:37): [True: 0, False: 103]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   45|    103|    {                                                                                              \
  |  |  |  |   46|      0|        ::phi::detail::phi_assert_failure_handler(#condition, __FILE__, __LINE__,                  \
  |  |  |  |   47|      0|                                                  PHI_CURRENT_FUNCTION());                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   24|      0|#    define PHI_CURRENT_FUNCTION() __PRETTY_FUNCTION__
  |  |  |  |  ------------------
  |  |  |  |   48|      0|    }                                                                                              \
  |  |  |  |   49|    103|    PHI_GCC_SUPPRESS_WARNING_POP()                                                                 \
  |  |  |  |   50|    103|    PHI_END_MACRO()
  |  |  |  |  ------------------
  |  |  |  |  |  |   25|    103|#define PHI_END_MACRO() } while ((void) 0, 0) /* avoid warnings */
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (25:34): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   34|    103|                                  "string_length if you intended to pass a nullptr.");
   35|       |
   36|    103|    usize count = 0u;
   37|  2.53k|    for (; *string != CharT('\0'); ++string)
  ------------------
  |  Branch (37:12): [True: 2.42k, False: 103]
  ------------------
   38|  2.42k|    {
   39|  2.42k|        ++count;
   40|  2.42k|    }
   41|       |
   42|    103|    return count;
   43|    103|}

_ZN3phi7integerImEppEv:
  311|  2.42k|    {
  312|  2.42k|        PHI_ASSERT(!detail::will_addition_error(detail::arithmetic_tag_for<IntegerT>{}, m_Value,
  ------------------
  |  |   53|  2.42k|#    define PHI_ASSERT(condition, ...) PHI_RELEASE_ASSERT(condition, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |   42|  2.42k|    PHI_BEGIN_MACRO()                                                                              \
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  2.42k|#define PHI_BEGIN_MACRO() do {
  |  |  |  |  ------------------
  |  |  |  |   43|  2.42k|    PHI_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast")                                           \
  |  |  |  |   44|  2.42k|    if (PHI_UNLIKELY(!static_cast<bool>(condition)))                                               \
  |  |  |  |  ------------------
  |  |  |  |  |  |   12|  2.42k|#    define PHI_UNLIKELY(condition) __builtin_expect(!!(condition), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (12:37): [True: 0, False: 2.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   45|  2.42k|    {                                                                                              \
  |  |  |  |   46|      0|        ::phi::detail::phi_assert_failure_handler(#condition, __FILE__, __LINE__,                  \
  |  |  |  |   47|      0|                                                  PHI_CURRENT_FUNCTION());                         \
  |  |  |  |  ------------------
  |  |  |  |  |  |   24|      0|#    define PHI_CURRENT_FUNCTION() __PRETTY_FUNCTION__
  |  |  |  |  ------------------
  |  |  |  |   48|      0|    }                                                                                              \
  |  |  |  |   49|  2.42k|    PHI_GCC_SUPPRESS_WARNING_POP()                                                                 \
  |  |  |  |   50|  2.42k|    PHI_END_MACRO()
  |  |  |  |  ------------------
  |  |  |  |  |  |   25|  2.42k|#define PHI_END_MACRO() } while ((void) 0, 0) /* avoid warnings */
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (25:34): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|  2.42k|                                                IntegerT(1)),
  314|  2.42k|                   "Operator++ will result in overflow. Args {}", m_Value);
  315|       |
  316|  2.42k|        m_Value += 1;
  317|  2.42k|        return *this;
  318|  2.42k|    }
_ZN3phi6detail19will_addition_errorImEEbNS0_20unsigned_integer_tagET_S3_:
  140|  2.42k|    {
  141|  2.42k|        return std::numeric_limits<TypeT>::max() - rhs < lhs;
  142|  2.42k|    }

LLVMFuzzerTestOneInput:
    5|    114|{
    6|    114|    if (size == 0)
  ------------------
  |  Branch (6:9): [True: 0, False: 114]
  ------------------
    7|      0|    {
    8|      0|        return 0;
    9|      0|    }
   10|    114|    if (data[size - 1] != '\0')
  ------------------
  |  Branch (10:9): [True: 11, False: 103]
  ------------------
   11|     11|    {
   12|     11|        return 0;
   13|     11|    }
   14|       |
   15|    103|    const char* string = reinterpret_cast<const char*>(data);
   16|       |
   17|    103|    phi::usize result = phi::string_length_unsafe(string);
   18|    103|    (void)result;
   19|       |
   20|    103|    return 0;
   21|    114|}

